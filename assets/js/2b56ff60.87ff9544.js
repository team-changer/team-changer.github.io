"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),v=r,k=c["".concat(s,".").concat(v)]||c[v]||d[v]||i;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=v;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},83517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={title:"Android ViewModel Test",slug:"viewmodel-test",authors:["otter"],tags:["android","viewmodel","test"]},o=void 0,l={permalink:"/viewmodel-test",editUrl:"https://github.com/trip-draw/trip-draw.github.io/tree/main/blog/2023-09-06-Android ViewModel Test/2023-09-06-Android ViewModel Test.md",source:"@site/blog/2023-09-06-Android ViewModel Test/2023-09-06-Android ViewModel Test.md",title:"Android ViewModel Test",description:"\uc548\ub155\ud558\uc138\uc694! \ud2b8\ub9bd\ub4dc\ub85c\uc6b0 \ud300\uc758 \uc218\ub2ec\uc785\ub2c8\ub2e4!",date:"2023-09-06T00:00:00.000Z",formattedDate:"2023\ub144 9\uc6d4 6\uc77c",tags:[{label:"android",permalink:"/tags/android"},{label:"viewmodel",permalink:"/tags/viewmodel"},{label:"test",permalink:"/tags/test"}],readingTime:8.475,hasTruncateMarker:!1,authors:[{name:"\uc218\ub2ec",title:"Android",url:"https://github.com/otter66",imageURL:"https://github.com/otter66.png",key:"otter"}],frontMatter:{title:"Android ViewModel Test",slug:"viewmodel-test",authors:["otter"],tags:["android","viewmodel","test"]},prevItem:{title:"\ube44\ub3d9\uae30 \uc608\uc678 \ub85c\uae45",permalink:"/log-async-exception"},nextItem:{title:"CloudWatch\ub97c \uc774\uc6a9\ud55c \ub85c\uae45, \uba54\ud2b8\ub9ad \ubaa8\ub2c8\ud130\ub9c1 \ud658\uacbd \uad6c\uc131",permalink:"/cloudwatch"}},s={authorsImageUrls:[void 0]},u=[{value:"Android ViewModel Test",id:"android-viewmodel-test",level:2},{value:"WorkerThread",id:"workerthread",level:3},{value:"LiveData Test",id:"livedata-test",level:2},{value:"setValue() / postValue()",id:"setvalue--postvalue",level:3},{value:"InstantTaskExecutorRule()",id:"instanttaskexecutorrule",level:3},{value:"Coroutine Test",id:"coroutine-test",level:2},{value:"viewModelScope.launch",id:"viewmodelscopelaunch",level:3},{value:"Dispatchers.setMain / Dispatchers.resetMain",id:"dispatcherssetmain--dispatchersresetmain",level:3},{value:"Coroutine Rule",id:"coroutine-rule",level:3},{value:"\ucc38\uace0\uc790\ub8cc",id:"\ucc38\uace0\uc790\ub8cc",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\uc548\ub155\ud558\uc138\uc694! \ud2b8\ub9bd\ub4dc\ub85c\uc6b0 \ud300\uc758 \uc218\ub2ec\uc785\ub2c8\ub2e4!",(0,r.kt)("br",{parentName:"p"}),"\n","\uc774 \uae00\uc744 \ud1b5\ud574 \uc548\ub4dc\ub85c\uc774\ub4dc\uc5d0\uc11c ViewModel\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc124\uba85\ub4dc\ub824\uace0 \ud569\ub2c8\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\ub2e8\uc704 \ud14c\uc2a4\ud2b8\uac00 \ubb34\uc5c7\uc778\uc9c0 \uc774\ud574\ud558\uace0, \uc801\uc6a9\ud574 \ubcf8 \uacbd\ud5d8\uc774 \uc788\ub294 \uc0ac\ub78c\uc744 \ub300\uc0c1\uc73c\ub85c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \uc678\uc5d0\ub3c4 MVVM, LiveData, Coroutine, Thread\uc5d0 \ub300\ud574\uc11c \uc644\ubcbd\ud788\ub294 \uc544\ub2c8\ub354\ub77c\ub3c4 \uc54c\uace0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\uba74 \uc774\ud574\uc5d0 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub77c \uc0dd\uac01\ud569\ub2c8\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc774 \uae00\uc744 \uc77d\uace0 ViewModel \ud14c\uc2a4\ud2b8\uc640 \uce5c\ud574\uc9c0\uae38 \ubc14\ub78d\ub2c8\ub2e4! \ud654\uc774\ud305!"),(0,r.kt)("h2",{id:"android-viewmodel-test"},"Android ViewModel Test"),(0,r.kt)("p",null,"\uc77c\ubc18\uc801\uc778 ViewModel\uc740 \uc0ac\uc804 \uc900\ube44 \uc5c6\uc774 \ud14c\uc2a4\ud2b8\ud558\uac8c \ub41c\ub2e4\uba74 \ud14c\uc2a4\ud2b8\uc5d0 \uc2e4\ud328\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ud06c\uac8c \ub450 \uac00\uc9c0 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. ViewModel\uc758 LiveData value \ubcc0\uacbd\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8, Coroutine\uacfc \uac19\uc740 \ube44\ub3d9\uae30 \uc791\uc5c5\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \ub450 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uc2e4\ud328 \uc6d0\uc778\uc740 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ud14c\uc2a4\ud2b8\uac00 MainThread\uc5d0\uc11c \uc791\ub3d9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4."),(0,r.kt)("h3",{id:"workerthread"},"WorkerThread"),(0,r.kt)("p",null,"\ud14c\uc2a4\ud2b8\ub294 WorkerThread\uc5d0\uc11c \uc791\ub3d9\ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,"\ud14c\uc2a4\ud2b8\ub294 MainThread\uc5d0\uc11c \uc218\ud589\ud558\uc9c0 \uc54a\uace0, WorkerThread\uc5d0\uc11c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc774\uac83\uc774 \uc65c LiveData value \ubcc0\uacbd \ud14c\uc2a4\ud2b8\uc640 Coroutine \ud14c\uc2a4\ud2b8\uc758 \uc2e4\ud328\uc758 \uc6d0\uc778\uc774 \ub420\uae4c\uc694?",(0,r.kt)("br",{parentName:"p"}),"\n",'\uc6b0\uc120, \ud14c\uc2a4\ud2b8\uac00 WorkerThread\uc5d0\uc11c \uc791\ub3d9\ud55c\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud574 \ubcf4\uace0, \uc774\uac83\uc774 \uc65c \ud14c\uc2a4\ud2b8 \uc2e4\ud328\uc758 \uc6d0\uc778\uc774 \ub418\ub294\uc9c0 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \ucf54\ub4dc\ub97c \ubcf4\uba74 \ud14c\uc2a4\ud2b8\uac00 "Test worker" \uc2a4\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class StudyTestThread {\n\n    @Test\n    fun `\ud14c\uc2a4\ud2b8\ub294 \ud14c\uc2a4\ud2b8 \uc791\uc5c5 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc218\ud589\ub41c\ub2e4`() {\n        val currentThreadName = Thread.currentThread().name\n        assertEquals("Test worker", currentThreadName)\n    }\n}\n')),(0,r.kt)("h2",{id:"livedata-test"},"LiveData Test"),(0,r.kt)("p",null,"\uc544\ub798\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"ViewModel"),"\ucf54\ub4dc\ub97c \ubcf4\uba74 ","_","products\ub77c\ub294 LivaData value\uc5d0 \ubcc0\uacbd\uc774 \ubc1c\uc0dd\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MainViewModel(private val productRepository: ProductRepository) : ViewModel() {\n\n    private val _products: MutableLiveData<List<Product>> = MutableLiveData(emptyList())\n    val products: LiveData<List<Product>> get() = _products\n\n    fun fetchAllProducts() {\n        _products.value = productRepository.getAllProducts()\n    }\n}\n")),(0,r.kt)("p",null,"\uc544\ub798\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"ViewModelTest")," \ucf54\ub4dc\ub97c \ubcf4\uba74 products\ub77c\ub294 LivaData value\uc5d0 \ubcc0\uacbd\uc774 \ubc1c\uc0dd\ud558\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"internal class MainViewModelTest {\n\n    private lateinit var sut: MainViewModel\n    private lateinit var productRepository: ProductRepository\n\n    @Before\n    fun setUp() {\n        productRepository = Fake.ProductRepository()    // \ud14c\uc2a4\ud2b8\ub97c \uc704\ud55c \uac00\uc9dc \uac1d\uccb4\ub85c \uc124\uc815\ud574\uc90d\ub2c8\ub2e4\n        sut = MainViewModel(productRepository)\n    }\n\n    @Test\n    fun `\uc804\uccb4 \uc0c1\ud488\uc744 \uc870\ud68c\ud55c\ub2e4`() {\n        // given\n        val products = productRepository.getAllProducts()\n\n        // when\n        sut.fetchAllProducts()\n\n        // then\n        assertEquals(products, sut.products.value)\n    }\n}\n")),(0,r.kt)("p",null,"\uc774\ub807\uac8c \ud14c\uc2a4\ud2b8\ud558\uba74 LiveData\uc758 value\ub97c \ubcc0\uacbd\ud558\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"sut.fetchAllProducts()")," \ubd80\ubd84\uc5d0\uc11c \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("img",{alt:"Alt text",src:n(27141).Z,width:"2120",height:"536"})),(0,r.kt)("h3",{id:"setvalue--postvalue"},"setValue() / postValue()"),(0,r.kt)("p",null,"LiveData\uc758 setValue() / postValue()\ub294 MainThread\uc5d0\uc11c \uc791\ub3d9\ud569\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@MainThread\nprotected void setValue(T value) {\n    assertMainThread("setValue");   // \uba54\uc778 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc218\ud589\n    mVersion++;\n    mData = value;\n    dispatchingValue(null);\n}\n\nprotected void postValue(T value) {\n    boolean postTask;\n    synchronized (mDataLock) {\n        postTask = mPendingData == NOT_SET;\n        mPendingData = value;\n    }\n    if (!postTask) {\n        return;\n    }\n    // \uba54\uc778 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc218\ud589\n    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n}\n')),(0,r.kt)("p",null,"\uc55e\uc11c \uc124\uba85\ub4dc\ub838\ub4ef\uc774 \ud14c\uc2a4\ud2b8\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Test worker")," \uc2a4\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\uc9c0\ub9cc, \ud14c\uc2a4\ud2b8\uc5d0\uc11c \ud655\uc778\ud558\uace0\uc790\ud558\ub294 LiveData\uc758 \uac12 \ubcc0\uacbd\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"Main")," \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc791\uc5c5\uc774 \uc77c\uc5b4\ub098\uc57c\ud569\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc5d0\uc11c \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4."),(0,r.kt)("h3",{id:"instanttaskexecutorrule"},"InstantTaskExecutorRule()"),(0,r.kt)("p",null,"\uc2a4\ub808\ub4dc\uac00 \ub2ec\ub77c\uc11c \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 InstantTaskExecutorRule\uc744 \uc124\uc815\ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"internal class MainViewModelTest {\n\n    @get:Rule\n    val instantExecutorRule = InstantTaskExecutorRule() //rule \uc124\uc815\n\n    private lateinit var sut: MainViewModel\n    private lateinit var productRepository: ProductRepository\n\n    @Before\n    fun setUp() { /* ... */ }\n\n    @Test\n    fun `\uc804\uccb4 \uc0c1\ud488\uc744 \uc870\ud68c\ud55c\ub2e4`() { /* ... */ }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/arch/core/executor/testing/InstantTaskExecutorRule"},"InstantTaskExecutorRule"),"\uc740 \uc548\ub4dc\ub85c\uc774\ub4dc \uc571 \uad6c\uc131\uc694\uc18c\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8\ub97c \ub3d9\uae30\uc801\uc778 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ud558\uace0, \uba54\uc778 \uc2a4\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \uac83\ucc98\ub7fc \uc2e4\ud589\ud569\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class InstantTaskExecutorRule extends TestWatcher {\n    @Override\n    protected void starting(Description description) {\n        super.starting(description);\n        ArchTaskExecutor.getInstance().setDelegate(new TaskExecutor() {\n            @Override\n            public void executeOnDiskIO(@NonNull Runnable runnable) {\n                runnable.run();\n            }\n\n            @Override\n            public void postToMainThread(@NonNull Runnable runnable) {\n                runnable.run();\n            }\n\n            @Override\n            public boolean isMainThread() {\n                return true;    // \ud56d\uc0c1 \uba54\uc778 \uc2a4\ub808\ub4dc\uc778 \uac83\ucc98\ub7fc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n            }\n        });\n    }\n\n    @Override\n    protected void finished(Description description) {\n        super.finished(description);\n        ArchTaskExecutor.getInstance().setDelegate(null);\n    }\n}\n")),(0,r.kt)("h2",{id:"coroutine-test"},"Coroutine Test"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"viewModelscope.launch"),"\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8\ub97c \uae30\uc900\uc73c\ub85c \uc124\uba85\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MainViewModel(private val productRepository: ProductRepository) : ViewModel() {\n\n    private val _products: MutableLiveData<List<Product>> = MutableLiveData(emptyList())\n    val products: LiveData<List<Product>> get() = _products\n\n    fun fetchAllProducts() {\n        viewModelScope.launch {\n            _products.value = productRepository.getAllProducts()\n        }\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"internal class MainViewModelTest {\n\n    @get:Rule\n    val instantExecutorRule = InstantTaskExecutorRule()\n\n    private lateinit var sut: MainViewModel\n    private lateinit var productRepository: ProductRepository\n\n    @Before\n    fun setUp() { /* ... */ }\n\n    @Test\n    fun `\uc804\uccb4 \uc0c1\ud488\uc744 \uc870\ud68c\ud55c\ub2e4`() { /* ... */ }\n}\n")),(0,r.kt)("p",null,"\uc774 \ub610\ud55c LiveData\uc640 \uac19\uc740 \uc774\uc720\ub85c \ud14c\uc2a4\ud2b8\uc5d0 \uc2e4\ud328\ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:n(30878).Z,width:"2198",height:"396"})),(0,r.kt)("h3",{id:"viewmodelscopelaunch"},"viewModelScope.launch"),(0,r.kt)("p",null,"viewModelScope.launch\ub294 Dispatcher\uac00 \uc801\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba74 MainThread\uc5d0\uc11c \uc791\ub3d9\ud569\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"public val ViewModel.viewModelScope: CoroutineScope\n    get() {\n        val scope: CoroutineScope? = this.getTag(JOB_KEY)\n        if (scope != null) {\n            return scope\n        }\n        return setTagIfAbsent(\n            JOB_KEY,\n            CloseableCoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)\n        )\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:n(67074).Z,width:"868",height:"536"})),(0,r.kt)("p",null,"\ud14c\uc2a4\ud2b8\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Test worker")," \uc2a4\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\uace0, \ucf54\ub8e8\ud2f4\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"Main")," \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc791\uc5c5\uc774 \uc77c\uc5b4\ub098\uc57c\ud569\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc5d0\uc11c \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4."),(0,r.kt)("h3",{id:"dispatcherssetmain--dispatchersresetmain"},"Dispatchers.setMain / Dispatchers.resetMain"),(0,r.kt)("p",null,"\uc2a4\ub808\ub4dc\uac00 \ub2ec\ub77c\uc11c \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \uba54\uc778\uc744 \uc0ac\uc6a9\ud558\ub294 Dispatcher\uac00 TestDispatcher\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ubcc0\uacbd\ud569\ub2c8\ub2e4. \uc989, \ud14c\uc2a4\ud2b8\uac00 \uc77c\uc5b4\ub098\ub294 \uc2a4\ub808\ub4dc\ub97c \ud1b5\uc77c\ud569\ub2c8\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\ud14c\uc2a4\ud2b8\uac00 \uc885\ub8cc\ub41c \ud6c4\uc5d0\ub294 \ub2e4\uc2dc \ucd08\uae30 \uc0c1\ud0dc\ucc98\ub7fc \uba54\uc778 \uc2a4\ub808\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d Dispatcher\uc758 Main\uc744 \ucd08\uae30\ud654\ud569\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"internal class MainViewModelTest {\n\n    @get:Rule\n    val instantExecutorRule = InstantTaskExecutorRule()\n\n    private lateinit var sut: MainViewModel\n    private lateinit var productRepository: ProductRepository\n\n    @Before\n    @OptIn(ExperimentalCoroutinesApi::class)\n    fun setUp() {\n        Dispatchers.setMain(UnconfinedTestDispatcher()) // Main Dispatcher\ub97c \ubcc0\uacbd\ud55c\ub2e4.\n        productRepository = Fake.ProductRepository()\n        sut = MainViewModel(productRepository)\n    }\n\n    @After\n    @OptIn(ExperimentalCoroutinesApi::class)\n    fun tearDown() {\n        Dispatchers.resetMain() // Main Dispatcher\ub97c \ucd08\uae30 \uc0c1\ud0dc\ub85c \ubcf5\uad6c\uc2dc\ud0a8\ub2e4.\n    }\n\n    @Test\n    fun `\uc804\uccb4 \uc0c1\ud488\uc744 \uc870\ud68c\ud55c\ub2e4`() {\n        // given\n        val products = productRepository.getAllProducts()\n\n        // when\n        sut.fetchAllProducts()\n\n        // then\n        assertEquals(products, sut.products.value)\n    }\n}\n\n")),(0,r.kt)("h3",{id:"coroutine-rule"},"Coroutine Rule"),(0,r.kt)("p",null,"\uc55e\uc11c \uc124\uba85 \ub4dc\ub9b0 \ub300\ub85c \ud14c\uc2a4\ud2b8\uac00 \uc2dc\uc791\ud560 \ub54c \uc2a4\ub808\ub4dc\ub97c \uc124\uc815\ud558\uace0, \ud14c\uc2a4\ud2b8\uac00 \ub05d\ub0a0 \ub54c \uc2a4\ub808\ub4dc\ub97c \ub2e4\uc2dc \uc124\uc815\ud558\ub294 \ucf54\ub4dc\uac00 \uc788\uc73c\uba74 \ud14c\uc2a4\ud2b8\uac00 \uc870\uae08 \ub354 \uadc0\ucc2e\uc544\uc9c8 \uac81\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8 \ub8f0\uc744 \uc0dd\uc131\ud574 \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc544\ub798\uc758 \ucf54\ub4dc\ucc98\ub7fc \ub8f0\uc744 \uc791\uc131\ud574 \uc90d\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@OptIn(ExperimentalCoroutinesApi::class)\nclass MainCoroutineRule constructor(\n    private val testDispatcher: TestDispatcher = UnconfinedTestDispatcher()\n) : TestWatcher() {\n\n    @OptIn(ExperimentalCoroutinesApi::class)\n    override fun starting(description: Description) {\n        super.starting(description)\n        Dispatchers.setMain(testDispatcher)\n    }\n\n    @OptIn(ExperimentalCoroutinesApi::class)\n    override fun finished(description: Description) {\n        super.finished(description)\n        Dispatchers.resetMain()\n    }\n}\n")),(0,r.kt)("p",null,"\ub9cc\ub4e4\uc5b4 \ub454 \ub8f0\uc744 \ud14c\uc2a4\ud2b8 \ub8f0\uc5d0 \uc801\uc6a9\ud574 \uc900\ub2e4\uba74 \ud14c\uc2a4\ud2b8 \uc2dc\uc791\uacfc \uc885\ub8cc \uc2dc\uc810\uc5d0 \uc2a4\ub808\ub4dc\ub97c \uc124\uc815\ud558\ub294 \ucf54\ub4dc\ub97c \ucd94\uac00\ub85c \uc791\uc131\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"internal class MainViewModelTest {\n\n    @get:Rule\n    val instantExecutorRule = InstantTaskExecutorRule()\n\n    @get:Rule\n    val mainCoroutineRule = MainCoroutineRule() // Dispatchers\ub97c \uc0ac\uc6a9\ud558\ub294 \uc2a4\ub808\ub4dc\uac00 \uba54\uc778 \uc2a4\ub808\ub4dc\uac00 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n\n    private lateinit var sut: MainViewModel\n    private lateinit var productRepository: ProductRepository\n\n    @Before\n    fun setUp() {\n        productRepository = Fake.ProductRepository()\n        sut = MainViewModel(productRepository)\n    }\n\n    // \uc774\uc81c \ub9e4\ubc88 \uc124\uc815\ud574\uc904 \ud544\uc694\uac00 \uc5c6\uc5b4\uc84c\uc2b5\ub2c8\ub2e4!\n\n    @Test\n    fun `\uc804\uccb4 \uc0c1\ud488\uc744 \uc870\ud68c\ud55c\ub2e4`() { /* ... */ }\n}\n")),(0,r.kt)("p",null,"\uc774\ud574\uac00 \uc798 \ub418\uc168\uae30\ub97c \ubc14\ub77c\uba70... \ucd1d\ucd1d..."),(0,r.kt)("h2",{id:"\ucc38\uace0\uc790\ub8cc"},"\ucc38\uace0\uc790\ub8cc"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tech.kakao.com/2021/11/08/test-code/"},"https://tech.kakao.com/2021/11/08/test-code/")))}d.isMDXComponent=!0},30878:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-11-a6ee61791df60f618f88e9bb7c3c6292.png"},27141:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-3-3562d2b6c3802e6c220e02b9d065b2ac.png"},67074:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-96706b30fd392175902c8c84faf52e8c.png"}}]);