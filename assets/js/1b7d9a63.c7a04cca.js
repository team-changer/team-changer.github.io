"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9747],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=i(n),m=a,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const s={title:"\ucf54\ub4dc \ucee8\ubca4\uc158",slug:"/backend/convention/code",last_update:{date:"2023/07/19",author:"\ud5c8\ube0c"}},o=void 0,l={unversionedId:"backend/\ucee8\ubca4\uc158 \ubc0f \uae30\uc220\uc2a4\ud0dd/\ucf54\ub4dc \ucee8\ubca4\uc158",id:"backend/\ucee8\ubca4\uc158 \ubc0f \uae30\uc220\uc2a4\ud0dd/\ucf54\ub4dc \ucee8\ubca4\uc158",title:"\ucf54\ub4dc \ucee8\ubca4\uc158",description:"\uc2a4\ud0c0\uc77c",source:"@site/docs/backend/\ucee8\ubca4\uc158 \ubc0f \uae30\uc220\uc2a4\ud0dd/\ucf54\ub4dc \ucee8\ubca4\uc158.md",sourceDirName:"backend/\ucee8\ubca4\uc158 \ubc0f \uae30\uc220\uc2a4\ud0dd",slug:"/backend/convention/code",permalink:"/docs/backend/convention/code",draft:!1,editUrl:"https://github.com/trip-draw/trip-draw.github.io/tree/main/docs/backend/\ucee8\ubca4\uc158 \ubc0f \uae30\uc220\uc2a4\ud0dd/\ucf54\ub4dc \ucee8\ubca4\uc158.md",tags:[],version:"current",lastUpdatedBy:"\ud5c8\ube0c",lastUpdatedAt:1689724800,formattedLastUpdatedAt:"2023\ub144 7\uc6d4 19\uc77c",frontMatter:{title:"\ucf54\ub4dc \ucee8\ubca4\uc158",slug:"/backend/convention/code",last_update:{date:"2023/07/19",author:"\ud5c8\ube0c"}},sidebar:"BackendSidebar",previous:{title:"\uc815\uc801 \ucee8\ud150\uce20 \uc81c\uacf5",permalink:"/docs/backend/server/static"},next:{title:"\ub3c4\ub85c\uba85 \uc8fc\uc18c \ud30c\uc2f1 \uc2a4\ud06c\ub9bd\ud2b8",permalink:"/docs/backend/code/address"}},p={},i=[{value:"\uc2a4\ud0c0\uc77c",id:"\uc2a4\ud0c0\uc77c",level:3},{value:"\ud074\ub798\uc2a4",id:"\ud074\ub798\uc2a4",level:3},{value:"\uc560\ub108\ud14c\uc774\uc158",id:"\uc560\ub108\ud14c\uc774\uc158",level:3},{value:"\ud14c\uc2a4\ud2b8",id:"\ud14c\uc2a4\ud2b8",level:3}],c={toc:i},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\uc2a4\ud0c0\uc77c"},"\uc2a4\ud0c0\uc77c"),(0,a.kt)("p",null,"\uae30\ubcf8\uc801\uc73c\ub85c ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/woowacourse/woowacourse-docs/tree/main/styleguide/java"},"\uc6b0\uc544\ud55c\ud14c\ud06c\ucf54\uc2a4 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc"),"\ub97c \ub530\ub978\ub2e4."),(0,a.kt)("h3",{id:"\ud074\ub798\uc2a4"},"\ud074\ub798\uc2a4"),(0,a.kt)("p",null,"\ud074\ub798\uc2a4\uc758 \uccab\ubc88\uc9f8 \uc904\uc740 \uac1c\ud589\uc744 \ud55c\ub2e4."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ub9c8\uc9c0\ub9c9 \uc904\uc740 \uac1c\ud589\uc744 \ud558\uc9c0 \uc54a\ub294\ub2e4.")),(0,a.kt)("h3",{id:"\uc560\ub108\ud14c\uc774\uc158"},"\uc560\ub108\ud14c\uc774\uc158"),(0,a.kt)("p",null,"\uc911\uc694\ub3c4\uac00 \uc788\ub294 \uc560\ub108\ud14c\uc774\uc158\ubd80\ud130 \ud074\ub798\uc2a4 \uc774\ub984\uc5d0 \uac00\uae5d\uac8c \uba85\uc2dc\ud55c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@SuppressWarnings("NonAsciiCharacters")\n@DisplayNameGeneration(ReplaceUnderscores.class)\n@Transactional\n@SpringBootTest\npublic class OrderServiceTest {\n}\n')),(0,a.kt)("h3",{id:"\ud14c\uc2a4\ud2b8"},"\ud14c\uc2a4\ud2b8"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\ud14c\uc2a4\ud2b8\uba85\uc740 \ud55c\uae00\ub85c \uc791\uc131\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@SuppressWarnings("NonAsciiCharacters")\n@DisplayNameGeneration(ReplaceUnderscores.class)\nclass HelloTest {\n\n    @Test\n    void \uc548\ub155\ud558\uc138\uc694_\ub77c\ub294_\ubb38\uc7a5\uc744_\ucd9c\ub825\ud55c\ub2e4() {\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"given, when, then \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\ub418 when + then\uc758 \uacbd\uc6b0 expect\ub97c \uc0ac\uc6a9\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Test\nvoid \uc548\ub155\ud558\uc138\uc694_\ub77c\ub294_\ubb38\uc7a5\uc744_\ucd9c\ub825\ud55c\ub2e4() {\n    // given\n    ...\n\n    // when\n    ...\n\n    // then\n    ...\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\uac80\uc99d\ubd80\uc758 \uacbd\uc6b0 \uae30\ub2a5\uc801\uc73c\ub85c \ub3d9\uc77c\ud55c \uacbd\uc6b0 AssertJ\uc758 \uba54\uc11c\ub4dc\ub97c \uc6b0\uc120\uc801\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4.")),(0,a.kt)("p",null,"ex) assertThat, assertThatThrownBy, assertThatNoException"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\uac80\uc99d\ubd80\uc5d0 \ub2e4\uc218\uc758 \uac80\uc99d\uc774 \ud544\uc694\ud55c \uacbd\uc6b0 SoftAssertion\uc758 assertSoftly\ub97c \uc0ac\uc6a9\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"assertSoftly(softly -> {\n    softly.assertThat(A).isEqualTo(B);\n    softly.assertThat(A).isEqualTo(C);\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\uac80\uc99d\ubd80\uc5d0 usingRecursiveComparison()\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \uac80\uc99d\ubd80\uac00 \uae38\uc5b4\uc9c8 \uacbd\uc6b0 \uac1c\ud589\uc744 \uc0ac\uc6a9\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"assertThat(postsSearchResponse.posts())\n        .usingRecursiveComparison()\n        .ignoringFieldsOfTypes(LocalDateTime.class)\n        .isEqualTo(List.of(PostResponse.from(jejuAugustPost), PostResponse.from(jejuJulyPost)));\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\ud14c\uc2a4\ud2b8 \ub300\uc0c1 \ub3c4\uba54\uc778\uc744 \uc81c\uc678\ud55c \ub3c4\uba54\uc778\uc744 \uc0dd\uc131\ud560 \ub54c Fixture\ub97c \uc0ac\uc6a9\ud55c\ub2e4.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ucd94\uac00\ub85c Fixture \uc55e\uc5d0 \uc0c8\ub85c\uc6b4\uc774 \ubd99\ub294 \ub2e4\uba74 Id\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 Fixture\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@SuppressWarnings("NonAsciiCharacters")\npublic class TripFixture {\n\n    public static Trip \uc5ec\ud589() {\n        return new Trip(1L, TripName.from("\ud1b5\ud6c4\ucd94"), \uc0ac\uc6a9\uc790().id(), TripStatus.ONGOING, "", "");\n    }\n\n    public static Trip \uc0c8\ub85c\uc6b4_\uc5ec\ud589(Member member) {\n        return new Trip(TripName.from(member.nickname()), member.id());\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\ub3c4\uba54\uc778 Fixture\ub97c \uc81c\uc678\ud558\uace0 \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 DTO\uac00 \ub9ce\uc740 \uacbd\uc6b0\uc5d0\ub294 \ub530\ub85c innerClass\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uad00\ub9ac\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'static class PostRequestFixture {\n    public static PostAndPointCreateRequest \ud604\uc7ac_\uc704\uce58_\uac10\uc0c1_\uc0dd\uc131_\uc694\uccad(Long tripId) {\n        return new PostAndPointCreateRequest(\n                tripId,\n                "\uc6b0\ub3c4\uc758 \ubc14\ub2f7\uac00",\n                "\uc81c\uc8fc\ud2b9\ubcc4\uc790\uce58\ub3c4 \uc81c\uc8fc\uc2dc \uc560\uc6d4\uc74d",\n                "\uc6b0\ub3c4\uc5d0\uc11c \ub545\ucf69 \uc544\uc774\uc2a4\ud06c\ub9bc\uc744 \uba39\uc5c8\ub2e4.\\\\n\ub108\ubb34 \ub9db\uc788\uc5c8\ub2e4.",\n                1.1,\n                2.2,\n                LocalDateTime.of(2023, 7, 18, 20, 24)\n        );\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\uc778\uc218\ud14c\uc2a4\ud2b8\ub97c \uc81c\uc678\ud558\uace0, given\uc5d0 \ub300\ud55c \ub370\uc774\ud130\uac00 \ud544\uc694\ud560 \uacbd\uc6b0 repository\ub97c \uc774\uc6a9\ud558\uc5ec \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Test\nvoid \ud68c\uc6d0_ID\ub85c_\ud68c\uc6d0\uc744_\uc870\ud68c\ud55c\ub2e4() {\n    // given\n    Member member = memberRepository.save(\uc0ac\uc6a9\uc790());\n\n    // when\n    Member foundMember = memberRepository.getById(member.id());\n\n    // then\n    assertThat(foundMember).isEqualTo(member);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Controller \ud14c\uc2a4\ud2b8\uc758 expect \uad6c\ubb38\uc774 \uc544\ub2cc when \uad6c\ubb38\uc5d0\uc11c RestAssured\ub97c \uc0ac\uc6a9\ud560 \ub54c StatusCode\ub97c extract\ud574\uc11c \uac80\uc99d\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Test\nvoid \uc0ac\uc6a9\uc790\uac00_\uc120\ud0dd\ud55c_\uc704\uce58\uc5d0_\ub300\ud55c_\uac10\uc0c1\uc744_\uc0dd\uc131\ud55c\ub2e4() {\n    // given\n    PostRequest request = \uac10\uc0c1_\uc0dd\uc131_\uc694\uccad(trip.id(), point.id());\n\n    // when\n    ExtractableResponse<Response> response = RestAssured.given().log().all()\n            .contentType(MULTIPART_FORM_DATA_VALUE)\n            .auth().preemptive().oauth2(accessToken)\n            .multiPart("dto", request, APPLICATION_JSON_VALUE)\n            .when().post("/posts")\n            .then().log().all()\n            .extract();\n\n    // then\n    PostCreateResponse postCreateResponse = response.as(PostCreateResponse.class);\n    assertSoftly(softly -> {\n        softly.assertThat(response.statusCode()).isEqualTo(CREATED.value());\n        softly.assertThat(postCreateResponse.postId()).isNotNull();\n    });\n}\n')))}d.isMDXComponent=!0}}]);